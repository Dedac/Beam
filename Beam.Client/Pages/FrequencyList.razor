@inject IDataService data

@if (data.Frequencies != null)
{
    @foreach (var frequency in data.Frequencies)
    {
        <li class="nav-item px-3">
            <NavLink class="nav-link" href=@($"frequency/{frequency.Id}") Match="NavLinkMatch.All">
                <span class="oi oi-audio-spectrum" aria-hidden="true"></span>
                <span> @frequency.Name </span>
            </NavLink>
        </li>
    }
}
<li class="nav-item px-3">
    <EditForm Model="@newFrequency" OnValidSubmit="AddFrequency">
        <DataAnnotationsValidator />
        <div class="input-group">
            <InputText @bind-Value="newFrequency.Name" placeholder="New Frequency" class="form-control" />
            <div class="input-group-append">
                <button type="submit" class="btn btn-secondary"><span class="oi oi-plus"></span></button>
            </div>
        </div>
        <ValidationMessage For="@(() => newFrequency.Name)" />
    </EditForm>
</li>

@code
{
    private NewFrequency newFrequency { get; set; } = new NewFrequency();
    protected override void OnInitialized()
    {
        data.UdpatedFrequencies += StateHasChanged;
        data.GetFrequencies().ConfigureAwait(false);
    }

    async void AddFrequency()
    {
        var name = newFrequency.Name;
        newFrequency.Name ="";
        await data.AddFrequency(name);
    }
}
