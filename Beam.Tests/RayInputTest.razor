@inherits TestComponentBase

@code
{
    private TestDataService dataService;
    private MockJsRuntimeInvokeHandler jsMock;
    private void RayInputTestsServiceSetup(TestServiceProvider services)
    {
        jsMock = services.AddMockJsRuntime();
        dataService = new TestDataService();
        services.AddSingleton<IDataService>(dataService);
        services.AddSingleton<ILocalStorageService,TestLocalStorage>();
    }
}

<SnapshotTest Description="RayInputRender" Setup="@Setup">
    <TestInput>
        <RayInput newRay="@(new RayToCast() { Text ="test text" })" />
    </TestInput>
    <ExpectedOutput>
        <p></p>
        <Card title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class:ignore value="test text"></textarea>
                    <div diff:ignore> </div>
                </div>
            </form>
        </Card>
        <p></p>
    </ExpectedOutput>
     @code
        {
            void Setup(SnapshotTest test) 
                { 
                   RayInputTestsServiceSetup(test.Services);                
                }
        }
</SnapshotTest>

<Fixture Description="Ray Not Created for empty Input" Test="EmptyInputDoesntCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast())" />
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <Card title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class="form-control invalid" value=""></textarea>
                    <div diff:ignore></div>
                </div>
                <div class="validation-message">You can't send an empty Ray!</div>
            </form>
        </Card>
        <p></p>
    </Fragment>
</Fixture>

@code
{
    public void EmptyInputDoesntCreate(Fixture fixture)
    {
        // Arrange
        RayInputTestsServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        bool updateTriggered = false;
        dataService.UpdatedRays += () => updateTriggered = true;

        // Act - cast the ray 
        cut.Find("form").Submit();

        // Assert the update was not triggered, and the markup has the validation message 
        var expected = fixture.GetFragment();
        Assert.False(updateTriggered);
        cut.MarkupMatches(expected);
    }
}


<Fixture Description="Ray Created With Valid Input" Test="ValidInputCallsCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast(){ Text = "Test" })" />
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <Card title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class="form-control valid" value=""></textarea>
                    <div diff:ignore></div>
                </div>                
            </form>
        </Card>
        <p></p>
    </Fragment>
</Fixture>
@code{
    public void ValidInputCallsCreate(Fixture fixture)
    {
        // Arrange
        RayInputTestsServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        bool updateTriggered = false;
        dataService.UpdatedRays += () => updateTriggered = true;

        // Act - cast the ray 
        cut.Find("form").Submit();

        // Assert the update was triggered, and the text value is empty
        var expected = fixture.GetFragment();
        Assert.True(updateTriggered);
        cut.MarkupMatches(expected);
    }
}

<Fixture Description="Javascript for focus should be invoked on loading the component" Test="ValidateJavaScriptFocus">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast(){ Text = "Test" })" />
    </ComponentUnderTest>
</Fixture>
@code{
    public void ValidateJavaScriptFocus (Fixture fixture)
    {
        // Arrange
        RayInputTestsServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();
        
        var focusElement = cut.Find("div.input-group");

        //Assert - Validate initial state
        jsMock.VerifyInvoke("UIHelpers.focusFirstChild")
            .Arguments.Single().ShouldBeElementReferenceTo(focusElement);
        
        
    }
}